/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package servervoice;

import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.DataLine;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.SourceDataLine;
import javax.sound.sampled.TargetDataLine;
import model.Client;
import request.Request;
//import ClientVoice.request.Request;

/**
 *
 * @author admin123
 */
public class ServerFrm extends javax.swing.JFrame {

    /**
     * Creates new form ServerFrm
     */
    
    public int port = 2021;
    public String address = "127.0.0.1";
    public static AudioFormat getAudioFormat(){
        float sampleRate = 8000.0F;
        int sampleSizeInBits = 16;
        int channels = 2;
        boolean bigEndian = false;
        boolean signed = true;
        return new AudioFormat(sampleRate, sampleSizeInBits, channels, signed, bigEndian);
    };
    public SourceDataLine data_in; 
    public ArrayList<Client> allClient;
    public ArrayList<Request> allRequest;
    public ServerFrm() {
        initComponents();
        allClient = new ArrayList<>();
        allRequest = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jButton1)
                .addContainerGap(207, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jButton1)
                .addContainerGap(189, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       
        System.out.println("SERVER IS RUNING"); 
        init_audio();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerFrm().setVisible(true);
            }
        });
    }

    public void init_audio(){
        try {
            AudioFormat format = getAudioFormat();
            DataLine.Info info_out = new DataLine.Info(SourceDataLine.class, format);
            if(!AudioSystem.isLineSupported(info_out))
            {
                System.out.println("not suport");
                System.exit(0);
            }
            data_in  = (SourceDataLine) AudioSystem.getLine(info_out);
            data_in.open(format);
            data_in.start(); 
            ServerThread sr = new ServerThread();
            sr.server = new DatagramSocket(port);
//            System.out.println(sr.server);
            sr.audio_out = data_in;
            ServerVoice.calling = true;
//            byte []buffer =  new byte[512];
//            DatagramPacket incomming = new DatagramPacket(buffer, buffer.length);
//            sr.server.receive(incomming);
//            buffer = incomming.getData();
//            ByteArrayInputStream byteIn = new ByteArrayInputStream(buffer);
//            DataInputStream dataIn = new DataInputStream(byteIn);
//            int localport = dataIn.readInt();
//            String username = dataIn.readUTF();
//            System.out.println(localport+username);
//            boolean exist = false;
//            for(int i = 0 ; i < allClient.size() ; i++)
//            {
//                if(allClient.get(i).getUsername().equals(username))
//                {
//                    allClient.get(i).setPort(localport);
//                    exist = true;
//                    break;
//                }
//                
//            }
//            if (exist == false){
//                Client c = new Client(username, localport);
//                allClient.add(c);
//            }
            sr.start();
            
            
            
        } catch (LineUnavailableException ex) {
            Logger.getLogger(ServerFrm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ServerFrm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables
}
